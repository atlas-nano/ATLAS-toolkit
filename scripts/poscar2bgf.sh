#!/bin/bash

if [ $# -eq 0 ]; then
	echo "usage: $0 poscar(s)"
	exit 1
fi

plist=(`ls $1`)
if [ ${#plist[*]} -eq 0 ]; then
	echo "ERROR: No valid files found while searching '$1'"
	exit 1
fi

awk '
function basename(file) {
	sub(".*/", "", file)
	return file
}
function acos(x) {
	return atan2(sqrt(1-x*x), x) 
}
{
	if(FNR==1) {
		cif_file=basename(FILENAME)
		gsub(/\.[a-zA-Z]+$/,".cif",cif_file)
		ci=1
		NR = 1
		print "working on " FILENAME " FNR " FNR " NR " NR
	}
	if(NR==1) {
		for(i=1;i<=NF;i++) {
			ele[i]=$i;
		}
	} else if (NR>2&&NR<6) {
		for(i=1;i<4;i++) {
			H[ci][i]=$i;
		}
		ci++
	} else if (NR==6) {
		ei=0;
		for(i=1;i<=NF;i++) {
			for(j=1;j<=$i;j++) {
				nele[++ei]=ele[i];
			}
		}
	} else if (NR==7) {
		fac=180.0/acos(-1.0);
		# a=(H[1][0],H[2][0],H[3][0])=(s2r[0],s2r[5],s2r[4])
		# b=(0      ,H[2][2],H[3][2])=(0     ,s2r[1],s2r[3])
		# c=(0      ,0      ,H[3][3])=(0     ,0     ,s2r[2])
		#printf "%f %f %f\n%f %f %f\n%f %f %f\n",H[1][1],H[1][2],H[1][3],H[2][1],H[2][2],H[2][3],H[3][1],H[3][2],H[3][3];
		a[0]=H[1][1]; a[1]=H[2][1]; a[2]=H[3][1];
		b[0]=0;       b[1]=H[2][2]; b[2]=H[3][2];
		c[0]=0;       c[1]=0;       c[2]=H[3][3];
		la = sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2]);
		lb = sqrt(b[1]*b[1] + b[2]*b[2]);
		lc = c[2];
		alpha = fac * acos( b[2] / lb );
		beta =  fac * acos( a[2] / la );
		gamma = fac * acos( (a[1]*b[1] + a[2]*b[2])/la/lb );
		la = 12.3; lb = 12.3; lc = 20; alpha = 90; beta = 90; gamma = 120;
		printf "# CIF file %s generated by %s\ndata_I\n_chemical_name_common CIF file\n",FILENAME,$0 > cif_file
		printf "_cell_length_a %f\n_cell_length_b %f\n_cell_length_c %f\n_cell_angle_alpha %f\n_cell_angle_beta %f\n_cell_angle_gamma %f\n",la,lb,lc,alpha,beta,gamma >> cif_file;
		printf "loop_\n\t_atom_site_type_symbol\n\t_atom_site_label\n\t_atom_site_Cartn_x\n\t_atom_site_Cartn_y\n\t_atom_site_Cartn_z\n" >> cif_file;
	} else if (NR>7) {
		$1 = sprintf("%8s %4s%-4d %11.9f",nele[NR-7],nele[NR-7],NR-7,$1);
		print >> cif_file
	}
}' $1

for i in `seq 1 ${#plist[*]}`
do
	ciffile=`basename ${plist[i-1]} .POSCAR | sed 's/.POCAR//'`".cif"
	bgffile=`basename ${plist[i-1]} .POSCAR | sed 's/.POCAR//'`".bgf"
	echo "$ciffile -> $bgffile"
	csh -f ~/scripts/cif2bgf.csh $ciffile &> /dev/null 2>&1
	~/scripts/modifyAtomData.pl -s $bgffile -w $bgffile -a 'fftype =~ /^C/' -f "FFTYPE:C_R" > /dev/null || true
	~/scripts/modifyAtomData.pl -s $bgffile -w $bgffile -a 'fftype =~ /^O/' -f "FFTYPE:O_3" > /dev/null || true
	~/scripts/modifyAtomData.pl -s $bgffile -w $bgffile -a 'fftype =~ /^H/' -f "FFTYPE:H_" > /dev/null || true
	~/scripts/removeBond.pl -b $bgffile -s $bgffile -i 'index>0' -j 'index>0' > /dev/null || true
	~/scripts/bondByDistance.pl -b $bgffile -s $bgffile -f DREIDING > /dev/null || true
	~/scripts/removeBond.pl -b $bgffile -s $bgffile -i 'fftype eq "C_R"' -j 'fftype ne "C_R"' > /dev/null || true
	~/scripts/removeBond.pl -b $bgffile -s $bgffile -j 'fftype eq "C_R"' -i 'fftype ne "C_R"' > /dev/null || true
	~/scripts/modifyAtomData.pl -s $bgffile -w $bgffile -a 'fftype =~ /^C/' -f "FFTYPE:C_2G" > /dev/null || true
	~/scripts/modifyAtomData.pl -s $bgffile -w $bgffile -a 'fftype =~ /^O/' -f "FFTYPE:Ow" > /dev/null || true
	~/scripts/modifyAtomData.pl -s $bgffile -w $bgffile -a 'fftype =~ /^H/' -f "FFTYPE:Hw" > /dev/null || true
	~/scripts/syncBonds.pl -b $bgffile -s $bgffile > /dev/null || true
done

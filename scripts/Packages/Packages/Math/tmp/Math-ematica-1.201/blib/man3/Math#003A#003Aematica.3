.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ematica 3pm"
.TH ematica 3pm "2017-08-17" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::ematica \- Perl extension for connecting Mathematica(TM)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::ematica qw(:PACKET :TYPE :FUNC);
.Ve
.SH "WARNING"
.IX Header "WARNING"
This is \fBalpha\fR software. User visible changes can happen any time.
.PP
The module is completely rewritten. Literally no line of the old stuff
is used (don't ask \- I've learned a few things since these days
;\-). If you are using the old 1.006 version, note that the interface
has changed. If there is an overwhelming outcry, I will provide some
backward compatibility stuff.
.PP
Feel free to suggest modifications and/or extensions. I don not use
Mathematica for real work right now and may fail to foresee the most
urgent needs. Even if you think that the interface is great, you are
invited to complete the documentation (and fix grammos and
typos). Since I am no native English speaker, I will delay the writing
of real documentation until the \s-1API\s0 has stabilized.
.PP
I developed this module using Mathematica 3.0.1 on a Linux 2.0.30 box.
I verified that it still works with Mathematica 4.0 for Solaris.  Let
me know, if it \fBdoes\fR work with other versions of Mathematica or does
\&\fBnot\fR work on other *nix flavors.
.PP
The module still compiles fine with Mathematica 5.0 on Linux 2.6 and
libc\-2.3.2.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Math::ematica\*(C'\fR module provides an interface to the MathLink(\s-1TM\s0)
library. Functions are not exported and should be called as methods.
Therefore the Perl names have the '\s-1ML\s0' prefix stripped.  Since Perl
can handle multiple return values, methods fetching elements from the
link return the values instead of passing results in reference
parameters.
.PP
The representation of the data passed between Perl and Mathematica is
straight forward exept the symbols which are represented as blessed
scalars in Perl.
.SH "Exported constants"
.IX Header "Exported constants"
.IP "\s-1PACKET\s0" 5
.IX Item "PACKET"
The \f(CW\*(C`PACKET\*(C'\fR tag identifies constants used as packet types.
.Sp
.Vb 1
\&  print "Got result packet" if $link\->NextPacket == RETURNPKT;
.Ve
.IP "\s-1TYPE\s0" 5
.IX Item "TYPE"
The \f(CW\*(C`TYPE\*(C'\fR tag identifies constants used as elements types.
.Sp
.Vb 1
\&  print "Got a symbol" if $link\->GetNext == MLTKSYM;
.Ve
.SH "Exported functions"
.IX Header "Exported functions"
.IP "\s-1FUNC\s0" 5
.IX Item "FUNC"
The \f(CW\*(C`FUNC\*(C'\fR tag currently only contains the \f(CW\*(C`symbol\*(C'\fR function which
returns the symbol for a given name.
.Sp
.Vb 1
\&  $sym = symbol \*(AqSin\*(Aq;
.Ve
.SH "The plain interface"
.IX Header "The plain interface"
This set of methods gives you direct access to the MathLink function.
Don't despair if you don't know them too much. There is a convenient
layer ontop of them ;\-). Methods below are only commented if they do
behave different than the corresponding C functions. Look in your
MathLink manual for details.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
The constructor is just a wrapper around \f(CW\*(C`MLOpenArgv\*(C'\fR.
.PP
.Vb 1
\&  $ml = new Math::ematica \*(Aq\-linklaunch\*(Aq, \*(Aq\-linkname\*(Aq, \*(Aqmath \-mathlink\*(Aq;
.Ve
.PP
The link is automatically activated on creation and will be closed
upon destruction.  So \f(CW\*(C`MLCloseLink\*(C'\fR is not accessible; use \f(CW\*(C`undef\*(C'\fR
or lexical variables to store links.  If you use a global variable and
dont force the link close, you will get an optional warning during
global destruction.
.ie n .SS """ErrorMessage"""
.el .SS "\f(CWErrorMessage\fP"
.IX Subsection "ErrorMessage"
.Vb 1
\&  print $link\->ErrorMessage;
.Ve
.ie n .SS """EndPacket"""
.el .SS "\f(CWEndPacket\fP"
.IX Subsection "EndPacket"
.ie n .SS """Flush"""
.el .SS "\f(CWFlush\fP"
.IX Subsection "Flush"
.ie n .SS """NewPacket"""
.el .SS "\f(CWNewPacket\fP"
.IX Subsection "NewPacket"
.ie n .SS """NextPacket"""
.el .SS "\f(CWNextPacket\fP"
.IX Subsection "NextPacket"
.ie n .SS """Ready"""
.el .SS "\f(CWReady\fP"
.IX Subsection "Ready"
.ie n .SS """PutSymbol"""
.el .SS "\f(CWPutSymbol\fP"
.IX Subsection "PutSymbol"
.ie n .SS """PutString"""
.el .SS "\f(CWPutString\fP"
.IX Subsection "PutString"
.ie n .SS """PutInteger"""
.el .SS "\f(CWPutInteger\fP"
.IX Subsection "PutInteger"
.ie n .SS """PutDouble"""
.el .SS "\f(CWPutDouble\fP"
.IX Subsection "PutDouble"
.ie n .SS """PutFunction"""
.el .SS "\f(CWPutFunction\fP"
.IX Subsection "PutFunction"
.ie n .SS """GetNext"""
.el .SS "\f(CWGetNext\fP"
.IX Subsection "GetNext"
.ie n .SS """GetInteger"""
.el .SS "\f(CWGetInteger\fP"
.IX Subsection "GetInteger"
.ie n .SS """GetDouble"""
.el .SS "\f(CWGetDouble\fP"
.IX Subsection "GetDouble"
.ie n .SS """GetString"""
.el .SS "\f(CWGetString\fP"
.IX Subsection "GetString"
The method does the appropriate \f(CW\*(C`MLDisownString\*(C'\fR call for you.
.ie n .SS """GetByteString"""
.el .SS "\f(CWGetByteString\fP"
.IX Subsection "GetByteString"
The method does the appropriate \f(CW\*(C`MLDisownByteString\*(C'\fR call for you.
.ie n .SS """GetSymbol"""
.el .SS "\f(CWGetSymbol\fP"
.IX Subsection "GetSymbol"
The module does the appropriate \f(CW\*(C`MLDisownSymbol\*(C'\fR call for you.  It
also blesses the result string into the package
\&\f(CW\*(C`Math::ematica::symbol\*(C'\fR.
.ie n .SS """Function"""
.el .SS "\f(CWFunction\fP"
.IX Subsection "Function"
Returns the function name and argument count in list context. In
scalar contex only the function name is returned.
.ie n .SS """GetRealList"""
.el .SS "\f(CWGetRealList\fP"
.IX Subsection "GetRealList"
Returns the array of reals.
.SH "The convenience interface"
.IX Header "The convenience interface"
.ie n .SS """PutToken"""
.el .SS "\f(CWPutToken\fP"
.IX Subsection "PutToken"
Puts a single token according to the passed data type.
.PP
.Vb 1
\&  $link\->PutToken(1);               # MLPutInteger
.Ve
.PP
Symbols are translated to \f(CW\*(C`MLPutFunction\*(C'\fR if the arity is provided as
aditional parameter.
.PP
.Vb 2
\&  $link\->PutToken(symbol \*(AqPi\*(Aq);     # MLPutSymbol
\&  $link\->PutToken(symbol \*(AqSin\*(Aq, 1); # MLPutFunction
.Ve
.ie n .SS """read_packet"""
.el .SS "\f(CWread_packet\fP"
.IX Subsection "read_packet"
Reads the current packet and returns it as nested data structure.  The
implementaion is not complete. But any packet made up of \f(CW\*(C`MLTKREAL\*(C'\fR,
\&\f(CW\*(C`MLTKINT\*(C'\fR, \f(CW\*(C`MLTKSTR\*(C'\fR, \f(CW\*(C`MLTKSYM\*(C'\fR, and \f(CW\*(C`MLTKFUNC\*(C'\fR should translate
correctely. A function symbol \f(CW\*(C`List\*(C'\fR is dropped automatically. So the
Mathematica expression \f(CW\*(C`List[1,2,3]\*(C'\fR translates to the Perl
expression \f(CW\*(C`[1,2,3]\*(C'\fR.
.PP
\&\fIMabybe this is \fR\fBtoo\fR\fI convenient?\fR.
.ie n .SS """call"""
.el .SS "\f(CWcall\fP"
.IX Subsection "call"
Call is the main convenience interface. You will be able to do most if
not all using this call.
.PP
Note that the syntax is nearly the same as you are used to as
\&\fIFullForm\fR in Mathematica.  Only the function names are moved inside
the brackets and separated with ',' from the arguments. The method
returns the nested data structures read by \f(CW\*(C`read_packet\*(C'\fR.
.PP
.Vb 1
\&  $link\->call([symbol \*(AqSin\*(Aq, 3.14159265358979/2]); # returns something near 1
.Ve
.PP
To get a table of values use:
.PP
.Vb 3
\&  $link\->call([symbol \*(AqTable\*(Aq,
\&               [symbol \*(AqSin\*(Aq, symbol \*(Aqx\*(Aq],
\&               [symbol \*(AqList\*(Aq, symbol \*(Aqx\*(Aq,  0, 1, 0.1]]);
.Ve
.PP
This returns a reference to an array of doubles.
.PP
You may omit the first \f(CW\*(C`symbol\*(C'\fR. \fIMaybe we should choose the default
mapping to \fR\fBSymbol\fR\fI an require \fR\fBStrings\fR\fIs to be marked?\fR
.ie n .SS """install"""
.el .SS "\f(CWinstall\fP"
.IX Subsection "install"
If you find this too ugly, you may \f(CW\*(C`install\*(C'\fR Mathematica functions as
Perl functions using the \f(CW\*(C`install\*(C'\fR method.
.PP
.Vb 4
\&  $link\->install(\*(AqSin\*(Aq,1);
\&  $link\->install(\*(AqPi\*(Aq);
\&  $link\->install(\*(AqN\*(Aq,1);
\&  $link\->install(\*(AqDivide\*(Aq,2);
\&
\&  Sin(Divide(Pi(),2.0)) # should return 1 (on machines which can
\&                        # represent \*(Aq2.0\*(Aq *exactely* in a double ;\-)
.Ve
.PP
The \f(CW\*(C`install\*(C'\fR method takes the name of the mathematica function, the
number of arguments and optional the name of the Perl function as
argument.
.PP
.Vb 1
\&  $link\->install(\*(AqSin\*(Aq,1,\*(Aqsin_by_mathematica\*(Aq);
.Ve
.PP
Make shure that you do not call any \fIinstalled\fR function after the
\&\f(CW$link\fR has gone. Wild things will happen!
.ie n .SS """send_packet"""
.el .SS "\f(CWsend_packet\fP"
.IX Subsection "send_packet"
Is the sending part of \f(CW\*(C`call\*(C'\fR. It translates the expressions passed
to a Mathematica package and puts it on the link.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
This method allows to register your Perl functions to Mathematica.
\&\fIRegistered\fR functions may be called during calculations.
.PP
.Vb 3
\&  sub addtwo {
\&    $_[0]+$_[1];
\&  }
\&
\&  $link\->register(\*(AqAddTwo\*(Aq, \e&addtwo, \*(AqInteger\*(Aq, \*(AqInteger\*(Aq);
\&  $link\->call([symbol \*(AqAddTwo\*(Aq,12, 3]) # returns 15
.Ve
.PP
You may register functions with unspecified argument types using undef:
.PP
.Vb 6
\&  sub do_print {
\&    print @_;
\&  }
\&  $link\->register(\*(AqDoPrint\*(Aq, undef);
\&  $link\->call([\*(AqDoPrint\*(Aq,12]);
\&  $link\->call([\*(AqDoPrint\*(Aq,"Hello"]);
.Ve
.ie n .SS """main"""
.el .SS "\f(CWmain\fP"
.IX Subsection "main"
This method allows to have Perl scripts installed in a running
Mathematica session.  The Perl script \fItry.pl\fR might look like this:
.PP
.Vb 3
\&  use Math::ematica;
\&  sub addtwo {
\&    my ($x, $y) = @_;
\&  
\&    $x + $y;
\&  }
\&  $ml\->register(\*(AqAddTwo\*(Aq, \e&addtwo, \*(AqInteger\*(Aq, \*(AqInteger\*(Aq);
\&  $ml\->main;
.Ve
.PP
Inside the Mathematica do:
.PP
.Vb 2
\&  Install["try.pl"]
\&  AddTwo[3,5];
.Ve
.PP
Admittedly, adding two numbers would be easier inside Mathematica. But
how about \s-1DNS\s0 lookups or \s-1SQL\s0 Databases?
.SH "AUTHOR"
.IX Header "AUTHOR"
Ulrich Pfeifer <\fIpfeifer@wait.de\fR>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See also \fIperl\fR\|(1) and your Mathematica and MathLink
documentation. Also check the \fIt/*.t\fR files in the distribution.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
I wish to thank Jon Orwant of \fIThe Perl Journal\fR, Nancy Blachman from
\&\fIThe Mathematica Journal\fR and Brett H. Barnhart from \fIWolfram
Research\fR
.PP
Jon brought the earlier versions of this module to the attention of
Nancy Blachman. She in turn did contact Brett H. Barnhart who was so
kind to provide a trial license which made this work possible.
.PP
So subscribe to \fIThe Perl Journal\fR and \fIThe Mathematica Journal\fR if
you are not subscribed already if you use this module (a Mathematica
license is needed anyway). You would be nice to nice people and may
even read something more about this module one day ;\-)
.PP
Special thanks to Randal L. Schwartz for naming this module.
.PP
Thanks also to Richard Jones for providing a login on a Solaris box so
that I could check that the module still works with Mathematica 4.0.
.SH "Copyright"
.IX Header "Copyright"
The \fBMath:ematica\fR module is Copyright (c) 1996,1997,1998,2000,2005 Ulrich
Pfeifer. Germany.  All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file.
.PP
\&\fBMathematica\fR and \fBMathLink\fR are registered trademarks of Wolfram
Research.
